# Question:- For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).
# Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.
# 
# Example 1:
# Input: str1 = "ABCABC", str2 = "ABC"
# Output: "ABC"
# Example 2:
# Input: str1 = "ABABAB", str2 = "ABAB"
# Output: "AB"
# Example 3:
# Input: str1 = "LEET", str2 = "CODE"
# Output: ""

def gcdOfStrings(str1, str2):
    """
    Returns the largest string x such that x divides both str1 and str2.

    Args:
        str1 (str): The first input string.
        str2 (str): The second input string.

    Returns:
        str: The largest string that divides both str1 and str2. Returns an empty string if no such string exists.
    """
    def gcd(a, b):
        """Returns the greatest common divisor of two numbers."""
        while b:
            a, b = b, a % b
        return a

    if str1 + str2 != str2 + str1:
        return ""

    divisor_length = gcd(len(str1), len(str2))
    return str1[:divisor_length]

def main():
    # Example usage:
    str1_1, str2_1 = "ABCABC", "ABC"
    str1_2, str2_2 = "ABABAB", "ABAB"
    str1_3, str2_3 = "LEET", "CODE"

    print(gcdOfStrings(str1_1, str2_1))  # Output: "ABC"
    print(gcdOfStrings(str1_2, str2_2))  # Output: "AB"
    print(gcdOfStrings(str1_3, str2_3))  # Output: ""

if __name__ == "__main__":
    main()
