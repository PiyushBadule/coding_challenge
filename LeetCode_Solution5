# Median of Two Sorted Arrays

# Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

# The overall run time complexity should be O(log(m + n)).

# Example 1:
# Input: nums1 = [1, 3], nums2 = [2]
# Output: 2.00000
# Explanation: merged
# array = [1, 2, 3] and median is 2.

# Example 2:
# Input: nums1 = [1, 2], nums2 = [3, 4]
# Output: 2.50000
# Explanation: merged
# array = [1, 2, 3, 4] and median is (2 + 3) / 2 = 2.5.

# Constraints:
# nums1.length == m
# nums2.length == n
# 0 <= m <= 1000
# 0 <= n <= 1000
# 1 <= m + n <= 2000
# -106 <= nums1[i], nums2[i] <= 106

from typing import List

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        """
        Finds the median of two sorted arrays.
        
        Args:
            nums1 (List[int]): The first sorted array.
            nums2 (List[int]): The second sorted array.
        
        Returns:
            float: The median of the two sorted arrays.
        """
        total_len = len(nums1) + len(nums2)
        if total_len % 2 == 0:
            return (self.findKth(total_len // 2, nums1, nums2) + self.findKth(total_len // 2 - 1, nums1, nums2)) / 2.0
        else:
            return self.findKth(total_len // 2, nums1, nums2)

    def findKth(self, k, nums1, nums2):
        """
        Finds the kth element in the merged sorted arrays.
        
        Args:
            k (int): The index of the element to be found.
            nums1 (List[int]): The first sorted array.
            nums2 (List[int]): The second sorted array.
        
        Returns:
            int: The kth element in the merged sorted arrays.
        """
        if not nums1:
            return nums2[k]
        if not nums2:
            return nums1[k]

        len1, len2 = len(nums1), len(nums2)
        idx1, idx2 = len1 // 2, len2 // 2
        val1, val2 = nums1[idx1], nums2[idx2]

        if idx1 + idx2 < k:
            if val1 > val2:
                return self.findKth(k - idx2 - 1, nums1, nums2[idx2 + 1:])
            else:
                return self.findKth(k - idx1 - 1, nums1[idx1 + 1:], nums2)
        else:
            if val1 > val2:
                return self.findKth(k, nums1[:idx1], nums2)
            else:
                return self.findKth(k, nums1, nums2[:idx2])

if __name__ == "__main__":
    solution = Solution()
    nums1 = [1, 2]
    nums2 = [3, 4]
    print(solution.findMedianSortedArrays(nums1, nums2))  # Output: 2.5
